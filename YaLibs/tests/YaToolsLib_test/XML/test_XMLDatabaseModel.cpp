//  Copyright (C) 2017 The YaCo Authors
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <iostream>

#include "IModelVisitor.hpp"


#ifndef YALIB_TEST
#   define YALIB_TEST
#endif

#include "test_common.hpp"
#include "XML/XMLDatabaseModel.hpp"
#include "ExporterValidatorVisitor.hpp"
#include "XML/XMLExporter.hpp"
#include "XML/common.hpp"
#include "IModel.hpp"
#include "Model.hpp"

#include "gtest/gtest.h"
#include <queue>
#include <fstream>

#ifdef _MSC_VER
#   include <filesystem>
#else
#   include <experimental/filesystem>
#endif

using namespace std;
using namespace experimental::filesystem;

int TestInTempFolder::index = 0;

class TestXMLDatabaseModel : public TestInTempFolder {
protected:
    virtual void SetUp() {
        TestInTempFolder::SetUp();
    }

    virtual void TearDown() {
        TestInTempFolder::TearDown();
    }
};

TEST_F (TestXMLDatabaseModel, TestFiles) {
    path filename("0123456789ABCDEF.xml");

    std::ofstream test_input;
    test_input.open(filename.string());
    test_input << "<?xml version=\"1.0\" encoding=\"iso-8859-15\"?>\n\
<sigfile>\n\
  <basic_block>\n\
    <id>2223456789ABCDEF</id>\n\
    <version>\n\
      <size>0x00000000000000C</size>\n\
      <signatures>\n\
        <signature algo=\"crc32\" method=\"firstbyte\">EF28578A</signature>\n\
      </signatures>\n\
      <offsets/>\n\
      <xrefs/>\n\
      <matchingsystem>\n\
        <address>00000038</address>\n\
        <equipment>None</equipment>\n\
        <os>None</os>\n\
      </matchingsystem>\n\
    </version>\n\
  </basic_block>\n\
</sigfile>";
    test_input.close();

    auto call_queue = make_shared<std::queue<std::string>>();
    TestDatabaseModelVisitor visitor(call_queue);
    std::vector<std::string> input_files {filename.string()};

    MakeXmlFilesDatabaseModel(input_files)->accept(visitor);

    EXPECT_FALSE(call_queue->empty());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_reference_object()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_id()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_object_version()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_size()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_signatures()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_signature()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_signatures()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_offsets()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_offsets()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_xrefs()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_xrefs()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_matching_systems()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_matching_system()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_matching_system_description()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_matching_system_description()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_matching_system()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_matching_systems()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_object_version()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_reference_object()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_TRUE(call_queue->empty());


}

TEST_F (TestXMLDatabaseModel, TestFilesValidator) {
    path filename("0123456789ABCDEF.xml");

    std::ofstream test_input;
    test_input.open(filename.string());
    test_input << "<?xml version=\"1.0\" encoding=\"iso-8859-15\"?>\n\
<sigfile>\n\
  <basic_block>\n\
    <id>2223456789ABCDEF</id>\n\
    <version>\n\
      <size>0x000000000000000C</size>\n\
      <signatures>\n\
        <signature algo=\"crc32\" method=\"firstbyte\">EF28578A</signature>\n\
      </signatures>\n\
      <offsets/>\n\
      <xrefs/>\n\
      <matchingsystem>\n\
        <address>00000038</address>\n\
        <equipment>None</equipment>\n\
        <os>None</os>\n\
      </matchingsystem>\n\
    </version>\n\
  </basic_block>\n\
</sigfile>";
    test_input.close();

    auto visitor = MakeExporterValidatorVisitor();
    std::vector<std::string> input_files {filename.string()};
    auto model = MakeXmlFilesDatabaseModel(input_files);
    EXPECT_NO_THROW(model->accept(*visitor));
}

TEST_F (TestXMLDatabaseModel, TestOneDoubleFile) {
    path filename("0123456789ABCDEF.xml");

    std::ofstream test_input;
    test_input.open(filename.string());
    test_input << "<?xml version=\"1.0\" encoding=\"iso-8859-15\"?>\n\
<sigfile>\n\
  <basic_block>\n\
    <id>2223456789ABCDEF</id>\n\
    <version>\n\
      <size>0x000000000000000C</size>\n\
      <signatures>\n\
        <signature algo=\"crc32\" method=\"firstbyte\">EF28578A</signature>\n\
      </signatures>\n\
      <offsets/>\n\
      <xrefs/>\n\
      <matchingsystem>\n\
        <address>00000038</address>\n\
        <equipment>None</equipment>\n\
        <os>None</os>\n\
      </matchingsystem>\n\
    </version>\n\
  </basic_block>\n\
  <basic_block>\n\
    <id>2223456789ABCDEF</id>\n\
    <version>\n\
      <size>0x000000000000000C</size>\n\
      <signatures>\n\
        <signature algo=\"crc32\" method=\"firstbyte\">EF28578A</signature>\n\
      </signatures>\n\
      <offsets/>\n\
      <xrefs/>\n\
      <matchingsystem>\n\
        <address>00000038</address>\n\
        <equipment>None</equipment>\n\
        <os>None</os>\n\
      </matchingsystem>\n\
    </version>\n\
  </basic_block>\n\
</sigfile>";
    test_input.close();

    auto call_queue = make_shared<std::queue<std::string>>();
    TestDatabaseModelVisitor visitor(call_queue);
    std::vector<std::string> input_files {filename.string()};

    MakeXmlFilesDatabaseModel(input_files)->accept(visitor);

    EXPECT_FALSE(call_queue->empty());


    EXPECT_STREQ(call_queue->front().c_str(), "visit_start()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_reference_object()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_id()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_object_version()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_size()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_signatures()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_signature()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_signatures()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_offsets()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_offsets()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_xrefs()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_xrefs()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_matching_systems()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_matching_system()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_matching_system_description()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_matching_system_description()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_matching_system()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_matching_systems()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_object_version()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_reference_object()");
    EXPECT_NO_THROW(call_queue->pop());

    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_reference_object()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_id()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_object_version()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_size()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_signatures()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_signature()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_signatures()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_offsets()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_offsets()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_xrefs()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_xrefs()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_matching_systems()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_start_matching_system()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_matching_system_description()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_matching_system_description()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_matching_system()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_matching_systems()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_object_version()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end_reference_object()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_STREQ(call_queue->front().c_str(), "visit_end()");
    EXPECT_NO_THROW(call_queue->pop());
    EXPECT_TRUE(call_queue->empty());

}

TEST_F (TestXMLDatabaseModel, TestOneFileWithBlob) {
    path filename("0123456789ABCDEF.xml");

    std::ofstream test_input;
    test_input.open(filename.string());
    test_input << "<?xml version=\"1.0\" encoding=\"iso-8859-15\"?>\n\
<sigfile>\n\
  <segment>\n\
    <id>3223456789ABCDEF</id>\n\
    <version>\n\
      <size>0x0000000000000C9B</size>\n\
      <userdefinedname>.text</userdefinedname>\n\
      <xrefs>\n\
        <xref offset=\"0x0000000000000000\">0123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000487\">1123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000490\">2123456789ABCDEF</xref>\n\
        <xref offset=\"0x00000000000004A3\">3123456789ABCDEF</xref>\n\
        <xref offset=\"0x00000000000004B0\">4123456789ABCDEF</xref>\n\
        <xref offset=\"0x000000000000067C\">5123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000680\">6123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000790\">7123456789ABCDEF</xref>\n\
        <xref offset=\"0x000000000000095A\">8123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000960\">9123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000A34\">A123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000A40\">B123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000BDC\">C123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000BE0\">D123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000C03\">E123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000C10\">F123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000C76\">0223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000C80\">1223456789ABCDEF</xref>\n\
      </xrefs>\n\
      <matchingsystem>\n\
        <address>0000000008000000</address>\n\
        <equipment>None</equipment>\n\
        <os>None</os>\n\
      </matchingsystem>\n\
      <attribute key=\"org_base\">0</attribute>\n\
      <attribute key=\"comb\">2</attribute>\n\
      <attribute key=\"color\">4294967295</attribute>\n\
      <attribute key=\"align\">3</attribute>\n\
      <attribute key=\"start_ea\">134217728</attribute>\n\
      <attribute key=\"perm\">5</attribute>\n\
      <attribute key=\"bitness\">1</attribute>\n\
      <attribute key=\"flags\">16</attribute>\n\
      <attribute key=\"end_ea\">134220955</attribute>\n\
      <attribute key=\"sel\">1</attribute>\n\
      <attribute key=\"type\">2</attribute>\n\
      <blob offsetblob>\n\
    </version>\n\
  </segment>\n\
</sigfile>";
    test_input.close();

    auto call_queue = make_shared<std::queue<std::string>>();
    TestDatabaseModelVisitor visitor(call_queue);
    std::vector<std::string> input_files {filename.string()};

    MakeXmlFilesDatabaseModel(input_files)->accept(visitor);

    EXPECT_FALSE(call_queue->empty());
    string output_path("output");
    auto visitor_2 = MakeXmlExporter(output_path);
    MakeXmlFilesDatabaseModel(input_files)->accept(*visitor_2);
    ifstream output1;
    output1.open(filename.string());

    ifstream output2;
    output2.open("output/segment/3223456789ABCDEF.xml");
    while(!output1.eof()) {
        string line1;
        string line2;
        getline(output1, line1);
        getline(output2, line2);
        EXPECT_STREQ(line1.c_str(), line2.c_str());
    }
}



TEST_F (TestXMLDatabaseModel, TestOneFileWithComment) {
    path filename("0123456789ABCDEF.xml");

    std::ofstream test_input;
    test_input.open(filename.string());
    test_input << "<?xml version=\"1.0\" encoding=\"iso-8859-15\"?>\n\
<sigfile>\n\
  <segment>\n\
    <id>3223456789ABCDEF</id>\n\
    <version>\n\
      <size>0x0000000000000C9B</size>\n\
      <userdefinedname>.text</userdefinedname>\n\
      <offsets>\n\
        <comments offset=\"0000000000000000\" type=\"nonrepeatable_comment\">Copy of shared data</comments>\n\
      </offsets>\n\
      <xrefs>\n\
        <xref offset=\"0x0000000000000000\">0123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000487\">1123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000490\">2123456789ABCDEF</xref>\n\
        <xref offset=\"0x00000000000004A3\">3123456789ABCDEF</xref>\n\
        <xref offset=\"0x00000000000004B0\">4123456789ABCDEF</xref>\n\
        <xref offset=\"0x000000000000067C\">5123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000680\">6123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000790\">7123456789ABCDEF</xref>\n\
        <xref offset=\"0x000000000000095A\">8123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000960\">9123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000A34\">A123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000A40\">B123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000BDC\">C123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000BE0\">D123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000C03\">E123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000C10\">F123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000C76\">0223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000C80\">1223456789ABCDEF</xref>\n\
      </xrefs>\n\
      <matchingsystem>\n\
        <address>0000000008000000</address>\n\
        <equipment>None</equipment>\n\
        <os>None</os>\n\
      </matchingsystem>\n\
      <attribute key=\"org_base\">0</attribute>\n\
      <attribute key=\"comb\">2</attribute>\n\
      <attribute key=\"color\">4294967295</attribute>\n\
      <attribute key=\"align\">3</attribute>\n\
      <attribute key=\"start_ea\">134217728</attribute>\n\
      <attribute key=\"perm\">5</attribute>\n\
      <attribute key=\"bitness\">1</attribute>\n\
      <attribute key=\"flags\">16</attribute>\n\
      <attribute key=\"end_ea\">134220955</attribute>\n\
      <attribute key=\"sel\">1</attribute>\n\
      <attribute key=\"type\">2</attribute>\n\
      <blob offsetblob>\n\
    </version>\n\
  </segment>\n\
</sigfile>";
    test_input.close();

    auto call_queue = make_shared<std::queue<std::string>>();
    TestDatabaseModelVisitor visitor(call_queue);
    std::vector<std::string> input_files {filename.string()};

    MakeXmlFilesDatabaseModel(input_files)->accept(visitor);

    EXPECT_FALSE(call_queue->empty());
    string output_path("output");
    auto visitor_2 = MakeXmlExporter(output_path);
    MakeXmlFilesDatabaseModel(input_files)->accept(*visitor_2);
    ifstream output1;
    output1.open(filename.string());

    ifstream output2;
    output2.open("output/segment/3223456789ABCDEF.xml");
    while(!output1.eof()) {
        string line1;
        string line2;
        getline(output1, line1);
        getline(output2, line2);
        EXPECT_STREQ(line1.c_str(), line2.c_str());
    }
}




TEST_F (TestXMLDatabaseModel, TestOneFileWithAccentuatedComment) {
    path filename("0123456789ABCDEF.xml");

    std::ofstream test_input;
    test_input.open(filename.string());
    test_input << "<?xml version=\"1.0\" encoding=\"iso-8859-15\"?>\n\
<sigfile>\n\
  <segment>\n\
    <id>3223456789ABCDEF</id>\n\
    <version>\n\
      <size>0x0000000000000C9B</size>\n\
      <userdefinedname>.text</userdefinedname>\n\
      <offsets>\n\
        <comments offset=\"0000000000000000\" type=\"nonrepeatable_comment\">Copy of shared data</comments>\n\
      </offsets>\n\
      <xrefs>\n\
        <xref offset=\"0x0000000000000000\">0123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000487\">1123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000490\">2123456789ABCDEF</xref>\n\
        <xref offset=\"0x00000000000004A3\">3123456789ABCDEF</xref>\n\
        <xref offset=\"0x00000000000004B0\">4123456789ABCDEF</xref>\n\
        <xref offset=\"0x000000000000067C\">5123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000680\">6123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000790\">7123456789ABCDEF</xref>\n\
        <xref offset=\"0x000000000000095A\">8123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000960\">9123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000A34\">A123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000A40\">B123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000BDC\">C123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000BE0\">D123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000C03\">E123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000C10\">F123456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000C76\">0223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000C80\">1223456789ABCDEF</xref>\n\
      </xrefs>\n\
      <matchingsystem>\n\
        <address>0000000008000000</address>\n\
        <equipment>None</equipment>\n\
        <os>None</os>\n\
      </matchingsystem>\n\
      <attribute key=\"org_base\">0</attribute>\n\
      <attribute key=\"comb\">2</attribute>\n\
      <attribute key=\"color\">4294967295</attribute>\n\
      <attribute key=\"align\">3</attribute>\n\
      <attribute key=\"start_ea\">134217728</attribute>\n\
      <attribute key=\"perm\">5</attribute>\n\
      <attribute key=\"bitness\">1</attribute>\n\
      <attribute key=\"flags\">16</attribute>\n\
      <attribute key=\"end_ea\">134220955</attribute>\n\
      <attribute key=\"sel\">1</attribute>\n\
      <attribute key=\"type\">2</attribute>\n\
      <blob offsetblob>\n\
    </version>\n\
  </segment>\n\
</sigfile>";
    test_input.close();

    auto call_queue = make_shared<std::queue<std::string>>();
    TestDatabaseModelVisitor visitor(call_queue);
    std::vector<std::string> input_files {filename.string()};

    MakeXmlFilesDatabaseModel(input_files)->accept(visitor);

    EXPECT_FALSE(call_queue->empty());
    string output_path("output");
    auto visitor_2 = MakeXmlExporter(output_path);
    MakeXmlFilesDatabaseModel(input_files)->accept(*visitor_2);
    ifstream output1;
    output1.open(filename.string());

    ifstream output2;
    output2.open("output/segment/3223456789ABCDEF.xml");
    while(!output1.eof()) {
        string line1;
        string line2;
        getline(output1, line1);
        getline(output2, line2);
        EXPECT_STREQ(line1.c_str(), line2.c_str());
    }
}


TEST_F (TestXMLDatabaseModel, TestOneFile_FileExporter) {
    path filename("0123456789ABCDEF.xml");

    std::ofstream test_input;
    test_input.open(filename.string());
    test_input << "<?xml version=\"1.0\" encoding=\"iso-8859-15\"?>\n\
<sigfile>\n\
<segment>\n\
  <id>3223456789ABCDEF</id>\n\
  <version>\n\
    <size>0x0000000000000C9B</size>\n\
    <userdefinedname>.text</userdefinedname>\n\
    <xrefs>\n\
      <xref offset=\"0x0000000000000000\">0123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000487\">1123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000490\">2123456789ABCDEF</xref>\n\
      <xref offset=\"0x00000000000004A3\">3123456789ABCDEF</xref>\n\
      <xref offset=\"0x00000000000004B0\">4123456789ABCDEF</xref>\n\
      <xref offset=\"0x000000000000067C\">5123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000680\">6123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000790\">7123456789ABCDEF</xref>\n\
      <xref offset=\"0x000000000000095A\">8123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000960\">9123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000A34\">A123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000A40\">B123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000BDC\">C123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000BE0\">D123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000C03\">E123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000C10\">F123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000C76\">0223456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000C80\">1223456789ABCDEF</xref>\n\
    </xrefs>\n\
    <matchingsystem>\n\
      <address>0000000008000000</address>\n\
      <equipment>None</equipment>\n\
      <os>None</os>\n\
    </matchingsystem>\n\
    <attribute key=\"org_base\">0</attribute>\n\
    <attribute key=\"comb\">2</attribute>\n\
    <attribute key=\"color\">4294967295</attribute>\n\
    <attribute key=\"align\">3</attribute>\n\
    <attribute key=\"start_ea\">134217728</attribute>\n\
    <attribute key=\"perm\">5</attribute>\n\
    <attribute key=\"bitness\">1</attribute>\n\
    <attribute key=\"flags\">16</attribute>\n\
    <attribute key=\"end_ea\">134220955</attribute>\n\
    <attribute key=\"sel\">1</attribute>\n\
    <attribute key=\"type\">2</attribute>\n\
  </version>\n\
</segment>\n\
</sigfile>";
    test_input.close();

    auto call_queue = make_shared<std::queue<std::string>>();
    TestDatabaseModelVisitor visitor(call_queue);
    std::vector<std::string> input_files {filename.string()};

    auto model1 = MakeXmlFilesDatabaseModel(input_files);
    EXPECT_NO_THROW(model1->accept(visitor));

    EXPECT_FALSE(call_queue->empty());
    string output_path("output.xml");
    auto visitor_2 = MakeFileXmlExporter(output_path);
    auto model2 = MakeXmlFilesDatabaseModel(input_files);
    EXPECT_NO_THROW(model2->accept(*visitor_2));
    ifstream output1;
    output1.open(filename.string());

    ifstream output2;
    output2.open(output_path);
    while(!output1.eof()) {
        string line1;
        string line2;
        getline(output1, line1);
        getline(output2, line2);
        EXPECT_STREQ(line1.c_str(), line2.c_str());
    }
}


TEST_F (TestXMLDatabaseModel, TestOneFileWithBlob_FileExporter) {
    path filename("0123456789ABCDEF.xml");

    std::ofstream test_input;
    test_input.open(filename.string());
    test_input << "<?xml version=\"1.0\" encoding=\"iso-8859-15\"?>\n\
<sigfile>\n\
<segment>\n\
  <id>3223456789ABCDEF</id>\n\
  <version>\n\
    <size>0x0000000000000C9B</size>\n\
    <userdefinedname>.text</userdefinedname>\n\
    <xrefs>\n\
      <xref offset=\"0x0000000000000000\">0123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000487\">1123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000490\">2123456789ABCDEF</xref>\n\
      <xref offset=\"0x00000000000004A3\">3123456789ABCDEF</xref>\n\
      <xref offset=\"0x00000000000004B0\">4123456789ABCDEF</xref>\n\
      <xref offset=\"0x000000000000067C\">5123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000680\">6123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000790\">7123456789ABCDEF</xref>\n\
      <xref offset=\"0x000000000000095A\">8123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000960\">9123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000A34\">A123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000A40\">B123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000BDC\">C123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000BE0\">D123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000C03\">E123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000C10\">F123456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000C76\">0223456789ABCDEF</xref>\n\
      <xref offset=\"0x0000000000000C80\">1223456789ABCDEF</xref>\n\
    </xrefs>\n\
    <matchingsystem>\n\
      <address>0000000008000000</address>\n\
      <equipment>None</equipment>\n\
      <os>None</os>\n\
    </matchingsystem>\n\
    <attribute key=\"org_base\">0</attribute>\n\
    <attribute key=\"comb\">2</attribute>\n\
    <attribute key=\"color\">4294967295</attribute>\n\
    <attribute key=\"align\">3</attribute>\n\
    <attribute key=\"start_ea\">134217728</attribute>\n\
    <attribute key=\"perm\">5</attribute>\n\
    <attribute key=\"bitness\">1</attribute>\n\
    <attribute key=\"flags\">16</attribute>\n\
    <attribute key=\"end_ea\">134220955</attribute>\n\
    <attribute key=\"sel\">1</attribute>\n\
    <attribute key=\"type\">2</attribute>\n\
    <blob offsetblob>\n\
  </version>\n\
</segment>\n\
</sigfile>";
    test_input.close();

    auto call_queue = make_shared<std::queue<std::string>>();
    TestDatabaseModelVisitor visitor(call_queue);
    std::vector<std::string> input_files {filename.string()};

    auto model = MakeXmlFilesDatabaseModel(input_files);
    EXPECT_NO_THROW(model->accept(visitor));

    EXPECT_FALSE(call_queue->empty());
    string output_path("output.xml");
    auto visitor_2 = MakeFileXmlExporter(output_path);
    auto model2 = MakeXmlFilesDatabaseModel(input_files);
    EXPECT_NO_THROW(model2->accept(*visitor_2));
    ifstream output1;
    output1.open(filename.string());

    ifstream output2;
    output2.open(output_path);
    while(!output1.eof()) {
        string line1;
        string line2;
        getline(output1, line1);
        getline(output2, line2);
        EXPECT_STREQ(line1.c_str(), line2.c_str());
    }
}


TEST_F (TestXMLDatabaseModel, TestOneFileWithComments) {
    path filename("4223456789ABCDEF.xml");

    std::ofstream test_input;
    test_input.open(filename.string());
    test_input << "<?xml version=\"1.0\" encoding=\"iso-8859-15\"?>\n\
<sigfile>\n\
  <basic_block>\n\
    <id>4223456789ABCDEF</id>\n\
    <version>\n\
      <size>0x000000000000002E</size>\n\
      <userdefinedname flags=\"0x00000054\">uuu</userdefinedname>\n\
      <signatures>\n\
        <signature algo=\"crc32\" method=\"firstbyte\">47BDE8AB</signature>\n\
      </signatures>\n\
      <offsets>\n\
        <comments offset=\"0000000000000002\" type=\"repeatable_comment\">cmt 1</comments>\n\
        <comments offset=\"0000000000000004\" type=\"repeatable_comment\">cmt 2</comments>\n\
        <comments offset=\"0000000000000005\" type=\"nonrepeatable_comment\">cmt 3</comments>\n\
        <comments offset=\"0000000000000006\" type=\"repeatable_comment\">repeatable_comment: comment</comments>\n\
        <comments offset=\"0000000000000006\" type=\"nonrepeatable_comment\">nonrepeatable_comment: comment</comments>\n\
        <comments offset=\"0000000000000006\" type=\"anterior_comment\">anterior_comment: comment</comments>\n\
        <comments offset=\"0000000000000006\" type=\"posterior_comment\">posterior_comment: comment</comments>\n\
        <comments offset=\"0000000000000006\" type=\"bookmark\">bookmark: comment</comments>\n\
        <comments offset=\"0000000000000007\" type=\"nonrepeatable_comment\">cmt 4</comments>\n\
      </offsets>\n\
      <xrefs>\n\
        <xref offset=\"0x0000000000000016\">5223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000020\">6223456789ABCDEF</xref>\n\
      </xrefs>\n\
      <matchingsystem>\n\
        <address>0000000000000000</address>\n\
        <equipment>None</equipment>\n\
        <os>None</os>\n\
      </matchingsystem>\n\
    </version>\n\
  </basic_block>\n\
</sigfile>\n\
";
    test_input.close();

    auto call_queue = make_shared<std::queue<std::string>>();
    TestDatabaseModelVisitor visitor(call_queue);
    std::vector<std::string> input_files {filename.string()};

    MakeXmlFilesDatabaseModel(input_files)->accept(visitor);

    EXPECT_FALSE(call_queue->empty());
    string output_path("output");
    auto visitor_2 = MakeXmlExporter(output_path);
    MakeXmlFilesDatabaseModel(input_files)->accept(*visitor_2);
    ifstream output1;
    output1.open(filename.string());

    ifstream output2;
    output2.open("output/basic_block/4223456789ABCDEF.xml");
    while(!output1.eof()) {
        string line1;
        string line2;
        getline(output1, line1);
        getline(output2, line2);
        EXPECT_STREQ(line1.c_str(), line2.c_str());
    }
}


TEST_F (TestXMLDatabaseModel, TestOneFileWithCommentsThroughMemory) {
    path filename("4223456789ABCDEF.xml");

    std::ofstream test_input;
    test_input.open(filename.string());
    test_input << "<?xml version=\"1.0\" encoding=\"iso-8859-15\"?>\n\
<sigfile>\n\
  <basic_block>\n\
    <id>4223456789ABCDEF</id>\n\
    <version>\n\
      <size>0x000000000000002E</size>\n\
      <userdefinedname flags=\"0x00000054\">uuu</userdefinedname>\n\
      <signatures>\n\
        <signature algo=\"crc32\" method=\"firstbyte\">47BDE8AB</signature>\n\
      </signatures>\n\
      <offsets>\n\
        <comments offset=\"0000000000000002\" type=\"repeatable_comment\">cmt 1</comments>\n\
        <comments offset=\"0000000000000004\" type=\"repeatable_comment\">cmt 2</comments>\n\
        <comments offset=\"0000000000000005\" type=\"nonrepeatable_comment\">cmt 3</comments>\n\
        <comments offset=\"0000000000000006\" type=\"repeatable_comment\">repeatable_comment: comment</comments>\n\
        <comments offset=\"0000000000000006\" type=\"nonrepeatable_comment\">nonrepeatable_comment: comment</comments>\n\
        <comments offset=\"0000000000000006\" type=\"anterior_comment\">anterior_comment: comment</comments>\n\
        <comments offset=\"0000000000000006\" type=\"posterior_comment\">posterior_comment: comment </comments>\n\
        <comments offset=\"0000000000000006\" type=\"bookmark\">bookmark : comment</comments>\n\
        <comments offset=\"0000000000000007\" type=\"nonrepeatable_comment\">cmt 4</comments>\n\
      </offsets>\n\
      <xrefs>\n\
        <xref offset=\"0x0000000000000016\">5223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000020\">6223456789ABCDEF</xref>\n\
      </xrefs>\n\
      <matchingsystem>\n\
        <address>0000000000000000</address>\n\
        <equipment>None</equipment>\n\
        <os>None</os>\n\
      </matchingsystem>\n\
    </version>\n\
  </basic_block>\n\
</sigfile>\n\
";
    test_input.close();

    auto call_queue = make_shared<std::queue<std::string>>();
    TestDatabaseModelVisitor visitor(call_queue);
    std::vector<std::string> input_files {filename.string()};

    MakeXmlFilesDatabaseModel(input_files)->accept(visitor);

    EXPECT_FALSE(call_queue->empty());
    string output_path("output");
    auto visitor_2 = MakeXmlExporter(output_path);
    auto visitor_model = MakeModel();
    MakeXmlFilesDatabaseModel(input_files)->accept(*visitor_model.visitor);

    visitor_model.model->accept(*visitor_2);
    ifstream output1;
    output1.open(filename.string());

    ifstream output2;
    output2.open("output/basic_block/4223456789ABCDEF.xml");
    while(!output1.eof()) {
        string line1;
        string line2;
        getline(output1, line1);
        getline(output2, line2);
        EXPECT_STREQ(line1.c_str(), line2.c_str());
    }
}

TEST_F(TestXMLDatabaseModel, test_xml_escape) {
    path filename("4223456789ABCDEF.xml");
    auto visitor = MakeFileXmlExporter(filename.string());
    EXPECT_NO_THROW(visitor->visit_start());
    EXPECT_NO_THROW(visitor->visit_start_reference_object(OBJECT_TYPE_BASIC_BLOCK));
    EXPECT_NO_THROW(visitor->visit_offset_comments(12, COMMENT_REPEATABLE, make_string_ref("pl<op")));
    EXPECT_NO_THROW(visitor->visit_offset_comments(12, COMMENT_REPEATABLE, make_string_ref("plop\xe2")));
    EXPECT_NO_THROW(visitor->visit_offset_comments(12, COMMENT_REPEATABLE, make_string_ref("plo>pÔ")));
    EXPECT_NO_THROW(visitor->visit_end_reference_object());
    EXPECT_NO_THROW(visitor->visit_end());

}



TEST_F (TestXMLDatabaseModel, TestOneFileWithXrefs) {
    path filename("4223456789ABCDEF.xml");

    std::ofstream test_input;
    test_input.open(filename.string());
    test_input << "<?xml version=\"1.0\" encoding=\"iso-8859-15\"?>\n\
<sigfile>\n\
  <basic_block>\n\
    <id>4223456789ABCDEF</id>\n\
    <version>\n\
      <size>0x000000000000002E</size>\n\
      <userdefinedname flags=\"0x00000054\">uuu</userdefinedname>\n\
      <signatures>\n\
        <signature algo=\"crc32\" method=\"firstbyte\">47BDE8AB</signature>\n\
      </signatures>\n\
      <offsets/>\n\
      <xrefs>\n\
        <xref offset=\"0x0000000000000016\">5223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000020\">6223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000020\" operand=\"0x0000000000000001\">7223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000030\" operand=\"0x0000000000000001\">8223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000030\">9223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000030\">A223456789ABCDEF</xref>\n\
      </xrefs>\n\
      <matchingsystem>\n\
        <address>0000000000000000</address>\n\
        <equipment>None</equipment>\n\
        <os>None</os>\n\
      </matchingsystem>\n\
    </version>\n\
  </basic_block>\n\
</sigfile>\n\
";
    test_input.close();

    auto call_queue = make_shared<std::queue<std::string>>();
    TestDatabaseModelVisitor visitor(call_queue);
    std::vector<std::string> input_files {filename.string()};

    MakeXmlFilesDatabaseModel(input_files)->accept(visitor);

    EXPECT_FALSE(call_queue->empty());
    string output_path("output");
    auto visitor_2 = MakeXmlExporter(output_path);
    MakeXmlFilesDatabaseModel(input_files)->accept(*visitor_2);
    ifstream output1;
    output1.open(filename.string());

    ifstream output2;
    output2.open("output/basic_block/4223456789ABCDEF.xml");
    while(!output1.eof()) {
        string line1;
        string line2;
        getline(output1, line1);
        getline(output2, line2);
        EXPECT_STREQ(line1.c_str(), line2.c_str());
    }
}


TEST_F (TestXMLDatabaseModel, TestOneFileWithXrefsThroughMemory) {
    path filename("4223456789ABCDEF.xml");

    std::ofstream test_input;
    test_input.open(filename.string());
    test_input << "<?xml version=\"1.0\" encoding=\"iso-8859-15\"?>\n\
<sigfile>\n\
  <basic_block>\n\
    <id>4223456789ABCDEF</id>\n\
    <version>\n\
      <size>0x000000000000002E</size>\n\
      <userdefinedname flags=\"0x00000054\">uuu</userdefinedname>\n\
      <signatures>\n\
        <signature algo=\"crc32\" method=\"firstbyte\">47BDE8AB</signature>\n\
      </signatures>\n\
      <xrefs>\n\
        <xref offset=\"0x0000000000000016\">5223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000020\">6223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000020\" operand=\"0x0000000000000001\">7223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000030\">9223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000030\">A223456789ABCDEF</xref>\n\
        <xref offset=\"0x0000000000000030\" operand=\"0x0000000000000001\">8223456789ABCDEF</xref>\n\
      </xrefs>\n\
      <matchingsystem>\n\
        <address>0000000000000000</address>\n\
        <equipment>None</equipment>\n\
        <os>None</os>\n\
      </matchingsystem>\n\
    </version>\n\
  </basic_block>\n\
</sigfile>\n\
";
    test_input.close();

    auto call_queue = make_shared<std::queue<std::string>>();
    TestDatabaseModelVisitor visitor(call_queue);
    std::vector<std::string> input_files {filename.string()};

    MakeXmlFilesDatabaseModel(input_files)->accept(visitor);

    EXPECT_FALSE(call_queue->empty());
    string output_path("output");
    auto visitor_2 = MakeXmlExporter(output_path);
    auto visitor_model = MakeModel();
    MakeXmlFilesDatabaseModel(input_files)->accept(*visitor_model.visitor);

    visitor_model.model->accept(*visitor_2);
    ifstream output1;
    output1.open(filename.string());

    ifstream output2;
    output2.open("output/basic_block/4223456789ABCDEF.xml");
    while(!output1.eof()) {
        string line1;
        string line2;
        getline(output1, line1);
        getline(output2, line2);
        EXPECT_STREQ(line1.c_str(), line2.c_str());
    }
}

